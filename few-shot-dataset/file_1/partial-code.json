[
  {
    "name": "Calculator.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "HW8/calculator/calculator/calculator/Calculator.cs",
    "content": "part 1:\n    /// <summary>\n    /// Gets the current display value of the calculator.\n    /// </summary>\n    /// <returns>The string representation of the current display value.</returns>\n    /// <remarks>\n    /// Returns \"0\" if the display value is empty.\n    /// </remarks>\n    public string GetDisplay() => string.IsNullOrEmpty(this.displayValue) ? \"0\" : this.displayValue; \n\n\n    /// <summary>\n    /// Adds a digit to the current input buffer\n    /// </summary>"
  },
  {
    "name": "MainWindowViewModel.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "HW8/calculator/calculator/calculator/MainWindowViewModel.cs",
    "content":  "part 1:\n    /// <summary>\n    /// Initializes a new instance of the MainWindowViewModel class.\n    /// </summary>\n    /// <remarks>\n    /// Sets up all command handlers and initializes calculator state.\n    /// </remarks>\n    public MainWindowViewModel()\n    {\n        DigitCommand = new RelayCommand(param =>\n        {\n            this.calculator.AddDigit(param.ToString()[0]); \n          this.Display = calculator.GetDisplay();\n        });\n\n        OperatorCommand = new RelayCommand(param =>\n        {\n            this.calculator.SetOperator(param.ToString()[0]);\n            this.Display = calculator.GetDisplay();\n        });"
  },
  {
    "name": "calculator.csproj",
    "extension": "csproj",
    "is_binary": false,
    "path": "HW8/calculator/calculator/calculator/calculator.csproj",
    "content":  "part 1:\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n\n    <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net9.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n    </PropertyGroup>"
  },
  {
    "name": "Tests.cs",
    "extension": "cs",
    "is_binary": false,
    "path": "HW8/calculator/calculator/сalculator.Tests/Tests.cs",
    "content": "part 1:\n// <copyright file=\"SparseVector.cs\" company=\"Mikhail Kharlamov\">\n// Copyright (c) Mikhail Kharlamov. All rights reserved.\n// </copyright>\n\nnamespace Calculator.Tests;\n\nusing Calculator;\n\npublic class Tests\n{\n    private CalculatorLogic calculator;\n\n    [SetUp]\n    public void Setup()\n    {\n        this.calculator = new CalculatorLogic();\n    }\n\n    [Test]\n    public void CalculatorLogicSimpleArithmeticTest()\n    {\n        this.calculator.AddDigit('2');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"2\"));\n        this.calculator.AddDigit('3');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"23\"));\n        this.calculator.SetOperator('+');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"23\"));\n        this.calculator.AddDigit('3');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"3\"));\n        this.calculator.SetOperator('-');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"26\"));\n        this.calculator.AddDigit('5');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"5\"));\n        this.calculator.SetOperator('/');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"21\"));\n        this.calculator.AddDigit('3');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"3\"));\n        this.calculator.SetOperator('*');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"7\"));\n        this.calculator.AddDigit('2');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"2\"));\n        this.calculator.SetOperator('=');\n        Assert.That(this.calculator.GetDisplay(), Is.EqualTo(\"14\"));\n    }\n"
  },
  {
    "name": "сalculator.Tests.csproj",
    "extension": "csproj",
    "is_binary": false,
    "path": "HW8/calculator/calculator/сalculator.Tests/сalculator.Tests.csproj",
    "content":  "part 1:\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <PropertyGroup>\n        <TargetFramework>net9.0</TargetFramework>\n        <LangVersion>latest</LangVersion>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n        <IsPackable>false</IsPackable>\n        <RootNamespace>Calculator.Tests</RootNamespace>\n    </PropertyGroup>\n\n    <ItemGroup>\n        <PackageReference Include=\"Avalonia\" Version=\"11.3.0\" />\n        <PackageReference Include=\"coverlet.collector\" Version=\"6.0.2\"/>\n        <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.12.0\"/>\n        <PackageReference Include=\"NUnit\" Version=\"4.2.2\"/>\n        <PackageReference Include=\"NUnit.Analyzers\" Version=\"4.4.0\"/>\n        <PackageReference Include=\"NUnit3TestAdapter\" Version=\"4.6.0\"/>\n    </ItemGroup>"
  }
]